/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.41
 * Generated at: 2022-06-08 05:07:25 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.view;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import model.*;
import java.util.*;

public final class main_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("model");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPではGET、POST、またはHEADのみが許可されます。 JasperはOPTIONSも許可しています。");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');

String searchWord=(String)request.getAttribute("searchWord");
searchWord=searchWord ==null? "":searchWord;
String mode=(String)request.getAttribute("mode");
mode=mode == null? "":mode;
List<Word> list=(List<Word>)request.getAttribute("list");
Integer total=(Integer)request.getAttribute("total");
Integer limit=(Integer)request.getAttribute("limit");
Integer pageNo=(Integer)request.getAttribute("pageNo");

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>EJWord</title>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/css/bootstrap.min.css\" integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" crossorigin=\"anonymous\">\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<div class=\"container\">\r\n");
      out.write("<form action=\"/ejword/main\" method=\"get\" class=\"form-inline\" class=\"form-control\" placeholder=\"検索語を入力\" required>\r\n");
      out.write("<input type=\"text\" name=\"searchWord\" value=\"");
      out.print(searchWord);
      out.write("\">\r\n");
      out.write("<select name=\"mode\" class=\"form-control\">\r\n");
      out.write("<option value=\"startsWith\"");
if(mode.equals("startsWith")) out.print(" selected"); 
      out.write(">で始まる</option>\r\n");
      out.write("<option value=\"contains\"");
if(mode.equals("contains")) out.print(" selected"); 
      out.write(">を含む</option>\r\n");
      out.write("<option value=\"endsWith\"");
if(mode.equals("endsWith")) out.print(" selected"); 
      out.write(">で終わる</option>\r\n");
      out.write("<option value=\"match\"");
if(mode.equals("match")) out.print(" selected"); 
      out.write(">と一致する</option>\r\n");
      out.write("</select>\r\n");
      out.write("<button type=\"submit\" class=\"btn btn-primary\">検索</button>\r\n");
      out.write("</form>\r\n");
 if(list !=null && list.size() > 0){ 
      out.write('\r');
      out.write('\n');
 if(total <= limit){ 
      out.write("\r\n");
      out.write("<p>全");
      out.print(total );
      out.write("件</p>\r\n");
}else{ 
      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("\t<p>全");
      out.print(total );
      out.write('件');
      out.write('中');
      out.write(' ');
      out.print((pageNo-1)*limit+1 );
      out.write('~');
      out.print(pageNo*limit > total? total:pageNo*limit );
      out.write("件を表示</p>\r\n");
      out.write("\r\n");
      out.write("\t\t<ul class=\"pager\">\r\n");
      out.write("\t\t");
if(pageNo > 1) {
      out.write("\r\n");
      out.write("\t\t  <li><a href=\"/ejword/main?searchWord=");
      out.print(searchWord );
      out.write("&mode=");
      out.print(mode );
      out.write("&page=");
      out.print(pageNo-1);
      out.write("\"><span aria-hidden=\"true\">&larr;</span>前へ</a></li>\r\n");
      out.write("\r\n");
      out.write("\t\t");
} 
      out.write("\r\n");
      out.write("\t\t");
      out.write("\r\n");
      out.write("\t\t");
if(pageNo*limit < total) {
      out.write("\r\n");
      out.write("\t\t<li><a href=\"/ejword/main?searchWord=");
      out.print(searchWord );
      out.write("&mode=");
      out.print(mode );
      out.write("&page=");
      out.print(pageNo+1);
      out.write("\">次へ<span aria-hidden=\"true\">&rarr;</span></a></li>\r\n");
      out.write("\r\n");
      out.write("\t\t");
} 
      out.write("\r\n");
      out.write("\t\t</ul>\r\n");
} 
      out.write("\r\n");
      out.write("<table class=\"table table-bordered table-striped\">\r\n");
 for(Word w:list){ 
      out.write("\r\n");
      out.write("<tr><th>");
      out.print(w.getTitle() );
      out.write("</th><td>");
      out.print(w.getBody() );
      out.write("</td></tr>\r\n");
} 
      out.write("\r\n");
      out.write("</table>\r\n");
} 
      out.write("\r\n");
      out.write("</div><!-- container -->\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
